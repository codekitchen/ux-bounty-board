{
  "name": "react-avatar",
  "version": "0.4.0",
  "description": "Universal avatar makes it possible to fetch/generate an avatar based on the information you have about that user.",
  "main": "avatar.js",
  "scripts": {
    "test": "grunt jshint",
    "build": "grunt build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sitebase/react-avatar.git"
  },
  "author": {
    "name": "Wim Mostmans",
    "email": "wim@sitebase.be"
  },
  "bugs": {
    "url": "https://github.com/sitebase/react-avatar/issues"
  },
  "keywords": [
    "component",
    "reactjs",
    "react-component",
    "avatar"
  ],
  "homepage": "https://github.com/sitebase/react-avatar",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-browserify": "^3.3.0",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-connect": "^0.9.0",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-gh-pages": "~0.9.1",
    "reactify": "^1.0.0"
  },
  "dependencies": {
    "MD5": "^1.2.1",
    "grunt-react": "^0.10.0",
    "is-array": "^1.0.1",
    "react": "^0.12.2",
    "react-tools": "^0.12.2"
  },
  "readme": "# &lt;Avatar&gt;\n\nUniversal avatar makes it possible to fetch/generate an avatar based on the information you have about that user.\nWe use a fallback system that if for example an invalid Facebook ID is used it will try Google, and so on.\n\nFor the moment we support following types:\n* Facebook\n* Google\n* Skype\n* Gravatar\n* Name initials\n* Custom text\n* Custom image\n\nThe fallbacks are in the same order as the list above were Facebook has the highest priority.\n\n## Demo\n\n[Check it live!](http://sitebase.github.io/react-avatar)\n\n## Install\n\nInstall the component using [NPM](https://www.npmjs.com/):\n\n```sh\n$ npm install react-avatar --save\n```\n\nOr [download as ZIP](https://github.com/sitebase/react-avatar/archive/master.zip).\n\n\n## Usage\n\n1. Import Custom Element:\n\n    ```js\n    var Avatar = require('react-avatar');\n    ```\n\n2. Start using it!\n\n    ```html\n    <Avatar />\n    ```\n\nSome examples:\n\n    <Avatar google-id=\"118096717852922241760\" size=\"100\" round=\"true\" />\n    <Avatar facebook-id=\"100008343750912\" size=\"150\" />\n    <Avatar skype-id=\"sitebase\" size=\"200\" />\n    <Avatar name=\"Wim Mostmans\" size=\"150\" />\n    <Avatar value=\"86%\" size=\"40\" />\n    <Avatar size=\"100\" facebook-id=\"invalidfacebookusername\" src=\"http://www.gravatar.com/avatar/a16a38cdfe8b2cbd38e8a56ab93238d3\" />\n\n## Options\n\n|   Attribute   |      Options      | Default |                                              Description                                               |\n| ------------- | ----------------- | ------- | ------------------------------------------------------------------------------------------------------ |\n| `email`       | *string*          |         | String of the email address of the user. You can also provide an MD5 hash.                             |\n| `facebook-id` | *int* OR *string* |         |                                                                                                        |\n| `google-id`   | *int*             |         |                                                                                                        |\n| `skype-id`    | *string*          |         |                                                                                                        |\n| `name`        | *string*          |         | Will be used to generate avatar based on the initials of the person                                    |\n| `value`       | *string*          |         | Show a value as avatar                                                                                 |\n| `color`       | *string*          | random  | Used in combination with `name` and `value`. Give it a fixed color with a hex like for example #FF0000 |\n| `size`        | *int*             | 50      | Size of the avatar                                                                                     |\n| `round`       | *bool*            | false   | Round the avatar corners                                                                               |\n| `src`         | *string*          |         | Fallback image to use                                                                                  |\n\n## Development\n\nIn order to run it locally you'll need to fetch some dependencies and a basic server setup.\n\n* Install [Grunt](http://gruntjs.com/):\n\n    ```sh\n    $ [sudo] npm install -g grunt-cli\n    ```\n\n* Install local dependencies:\n\n    ```sh\n    $ npm install\n    ```\n\n* Auto build new test version when developing that can be run with `grunt connect`:\n\n    ```sh\n    $ grunt watch\n    ```\n\n* To test your project, start the development server and open `http://localhost:8000`.\n\n    ```sh\n    $ grunt connect\n    ```\n\n* To provide a live demo, send everything to `gh-pages` branch.\n\n    ```sh\n    $ grunt deploy\n    ```\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -m 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## History\n\nFor detailed changelog, check [Releases](https://github.com/sitebase/react-avatar/releases).\n\n## License\n\n[MIT License](http://opensource.org/licenses/MIT)\n\n## Todo\n* Add Jest unit tests\n",
  "readmeFilename": "README.md",
  "_id": "react-avatar@0.4.0",
  "_from": "react-avatar@"
}
